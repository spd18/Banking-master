pragma solidity ^0.4.24;

contract Bank {

    address private _owner;
    mapping(address => uint8) private _owners;

    uint constant MIN_SIGNATURES = 2;
    uint private _transactionIdx;

    struct Transaction {
        address from;
        address to;
        uint amount;
        uint8 signatureCount;
        mapping (address => uint8) signatures;
    }

    mapping(address => uint256) private balanceOf;//to get the balannce of the specifc account 
    mapping (uint => Transaction) private _transactions;
    uint[] private _pendingTransactions;

    modifier isOwner() {
        require(msg.sender == _owner,"sender not authorized");
        _;
    }

    modifier validOwner() {
        require(msg.sender == _owner || _owners[msg.sender] == 1,"sender not authoreized and one of the owner");
        _;
    }

    event DepositFunds(address from, uint amount);
    event TransactionCreated(address from, address to, uint amount, uint transactionId);
    event TransactionCompleted(address from, address to, uint amount, uint transactionId);
    event TransactionSigned(address by, uint transactionId);

    constructor()
        public {
        _owner = msg.sender;
    }

    function addOwner(address owner)
        public 
        isOwner{
        _owners[owner] = 1;
    }

    function removeOwner(address owner)
        public 
        isOwner {
        _owners[owner] = 0;
    }

    function depositFund()
        public
        payable { 
        emit DepositFunds(msg.sender, msg.value);
    }

    function withdraw(uint amount)
        public {
        transferTo(msg.sender, amount);
    }

    function transferTo(address to, uint amount)
        public 
        validOwner {
        require(address(this).balance >= amount,"Transaction amount is greator than balance in account");
        uint transactionId = _transactionIdx++;

        Transaction memory transaction;
        transaction.from = msg.sender;
        transaction.to = to;
        transaction.amount = amount;
        transaction.signatureCount = 0;

        _transactions[transactionId] = transaction;
        _pendingTransactions.push(transactionId);

        emit TransactionCreated(msg.sender, to, amount, transactionId);
    }

    function getPendingTransactions()
        public
        view
        validOwner
        returns (uint[]) {
        return _pendingTransactions;
    }

    function signTransaction(uint transactionId)
      public 
      validOwner{

        Transaction storage transaction = _transactions[transactionId];

        // Transaction must exist
        require(0x0 != transaction.from,"Transaction must Exist");
        // Creator cannot sign the transaction
        require(msg.sender != transaction.from,"Creator Cant sign the transaction");
        // Cannot sign a transaction more than once
        require(transaction.signatures[msg.sender] != 1,"Cant sign the transaction more than once");

        transaction.signatures[msg.sender] = 1;
        transaction.signatureCount++;

        emit TransactionSigned(msg.sender, transactionId);

        if (transaction.signatureCount >= MIN_SIGNATURES) {
            require(address(this).balance >= transaction.amount,"Transaction amount is greator than balance in account");
            transaction.to.transfer(transaction.amount);
            emit TransactionCompleted(transaction.from, transaction.to, transaction.amount, transactionId);
            deleteTransaction(transactionId);
        }
    }

    function deleteTransaction(uint transactionId)
      public 
      validOwner {
        uint8 replace = 0;
        for(uint i = 0; i < _pendingTransactions.length; i++) {
            if (1 == replace) {
                _pendingTransactions[i-1] = _pendingTransactions[i];
            } else if (transactionId == _pendingTransactions[i]) {
                replace = 1;
            }
        }
        delete _pendingTransactions[_pendingTransactions.length - 1];
        _pendingTransactions.length--;
        delete _transactions[transactionId];
    }

    function walletBalance()
      public
      view      
      returns (uint) {
        return address(this).balance;
    }

}